environments.prod.name=Employee Manager
server.port=8080

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# ===============================
# DATA SOURCE DEV
 spring.datasource.url = jdbc:mysql://localhost:3306/employeemanager?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
 spring.datasource.username = admin
 spring.datasource.password = letmein
# ===============================

# ENDPOINTS WEB CONFIGURATION (WebEndpointProperties)
#management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.exclude=*
#management.endpoints.web.base-path=/actuator # Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.
#management.endpoints.web.path-mapping= # Mapping between endpoint IDs and the path that should expose them.

# ENDPOINTS CORS CONFIGURATION (CorsEndpointProperties)
#management.endpoints.web.cors.allow-credentials= # Whether credentials are supported. When not set, credentials are not supported.
#management.endpoints.web.cors.allowed-headers=*
#management.endpoints.web.cors.allowed-methods=*
#management.endpoints.web.cors.allowed-origins=*
#management.endpoints.web.cors.exposed-headers=Access-Control-Allow-Origin
#management.endpoints.web.cors.max-age=1800s # How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.



# Set here configurations for the database connection

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect